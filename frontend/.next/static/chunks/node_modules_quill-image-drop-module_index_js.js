"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["node_modules_quill-image-drop-module_index_js"],{

/***/ "./node_modules/quill-image-drop-module/index.js":
/*!*******************************************************!*\
  !*** ./node_modules/quill-image-drop-module/index.js ***!
  \*******************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ImageDrop\": function() { return /* binding */ ImageDrop; }\n/* harmony export */ });\n/**\n * Custom module for quilljs to allow user to drag images from their file system into the editor\n * and paste images from clipboard (Works on Chrome, Firefox, Edge, not on Safari)\n * @see https://quilljs.com/blog/building-a-custom-module/\n */\nclass ImageDrop {\n\n\t/**\n\t * Instantiate the module given a quill instance and any options\n\t * @param {Quill} quill\n\t * @param {Object} options\n\t */\n\tconstructor(quill, options = {}) {\n\t\t// save the quill reference\n\t\tthis.quill = quill;\n\t\t// bind handlers to this instance\n\t\tthis.handleDrop = this.handleDrop.bind(this);\n\t\tthis.handlePaste = this.handlePaste.bind(this);\n\t\t// listen for drop and paste events\n\t\tthis.quill.root.addEventListener('drop', this.handleDrop, false);\n\t\tthis.quill.root.addEventListener('paste', this.handlePaste, false);\n\t}\n\n\t/**\n\t * Handler for drop event to read dropped files from evt.dataTransfer\n\t * @param {Event} evt\n\t */\n\thandleDrop(evt) {\n\t\tevt.preventDefault();\n\t\tif (evt.dataTransfer && evt.dataTransfer.files && evt.dataTransfer.files.length) {\n\t\t\tif (document.caretRangeFromPoint) {\n\t\t\t\tconst selection = document.getSelection();\n\t\t\t\tconst range = document.caretRangeFromPoint(evt.clientX, evt.clientY);\n\t\t\t\tif (selection && range) {\n\t\t\t\t\tselection.setBaseAndExtent(range.startContainer, range.startOffset, range.startContainer, range.startOffset);\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.readFiles(evt.dataTransfer.files, this.insert.bind(this));\n\t\t}\n\t}\n\n\t/**\n\t * Handler for paste event to read pasted files from evt.clipboardData\n\t * @param {Event} evt\n\t */\n\thandlePaste(evt) {\n\t\tif (evt.clipboardData && evt.clipboardData.items && evt.clipboardData.items.length) {\n\t\t\tthis.readFiles(evt.clipboardData.items, dataUrl => {\n\t\t\t\tconst selection = this.quill.getSelection();\n\t\t\t\tif (selection) {\n\t\t\t\t\t// we must be in a browser that supports pasting (like Firefox)\n\t\t\t\t\t// so it has already been placed into the editor\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t// otherwise we wait until after the paste when this.quill.getSelection()\n\t\t\t\t\t// will return a valid index\n\t\t\t\t\tsetTimeout(() => this.insert(dataUrl), 0);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * Insert the image into the document at the current cursor position\n\t * @param {String} dataUrl  The base64-encoded image URI\n\t */\n\tinsert(dataUrl) {\n\t\tconst index = (this.quill.getSelection() || {}).index || this.quill.getLength();\n\t\tthis.quill.insertEmbed(index, 'image', dataUrl, 'user');\n\t}\n\n\t/**\n\t * Extract image URIs a list of files from evt.dataTransfer or evt.clipboardData\n\t * @param {File[]} files  One or more File objects\n\t * @param {Function} callback  A function to send each data URI to\n\t */\n\treadFiles(files, callback) {\n\t\t// check each file for an image\n\t\t[].forEach.call(files, file => {\n\t\t\tif (!file.type.match(/^image\\/(gif|jpe?g|a?png|svg|webp|bmp|vnd\\.microsoft\\.icon)/i)) {\n\t\t\t\t// file is not an image\n\t\t\t\t// Note that some file formats such as psd start with image/* but are not readable\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t// set up file reader\n\t\t\tconst reader = new FileReader();\n\t\t\treader.onload = (evt) => {\n\t\t\t\tcallback(evt.target.result);\n\t\t\t};\n\t\t\t// read the clipboard item or file\n\t\t\tconst blob = file.getAsFile ? file.getAsFile() : file;\n\t\t\tif (blob instanceof Blob) {\n\t\t\t\treader.readAsDataURL(blob);\n\t\t\t}\n\t\t});\n\t}\n\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcXVpbGwtaW1hZ2UtZHJvcC1tb2R1bGUvaW5kZXguanMuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTzs7QUFFUDtBQUNBO0FBQ0EsWUFBWSxPQUFPO0FBQ25CLFlBQVksUUFBUTtBQUNwQjtBQUNBLGdDQUFnQztBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFlBQVksT0FBTztBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxZQUFZLE9BQU87QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBOztBQUVBO0FBQ0E7QUFDQSxZQUFZLFFBQVE7QUFDcEI7QUFDQTtBQUNBLGdEQUFnRDtBQUNoRDtBQUNBOztBQUVBO0FBQ0E7QUFDQSxZQUFZLFFBQVE7QUFDcEIsWUFBWSxVQUFVO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9xdWlsbC1pbWFnZS1kcm9wLW1vZHVsZS9pbmRleC5qcz85MDRjIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ3VzdG9tIG1vZHVsZSBmb3IgcXVpbGxqcyB0byBhbGxvdyB1c2VyIHRvIGRyYWcgaW1hZ2VzIGZyb20gdGhlaXIgZmlsZSBzeXN0ZW0gaW50byB0aGUgZWRpdG9yXG4gKiBhbmQgcGFzdGUgaW1hZ2VzIGZyb20gY2xpcGJvYXJkIChXb3JrcyBvbiBDaHJvbWUsIEZpcmVmb3gsIEVkZ2UsIG5vdCBvbiBTYWZhcmkpXG4gKiBAc2VlIGh0dHBzOi8vcXVpbGxqcy5jb20vYmxvZy9idWlsZGluZy1hLWN1c3RvbS1tb2R1bGUvXG4gKi9cbmV4cG9ydCBjbGFzcyBJbWFnZURyb3Age1xuXG5cdC8qKlxuXHQgKiBJbnN0YW50aWF0ZSB0aGUgbW9kdWxlIGdpdmVuIGEgcXVpbGwgaW5zdGFuY2UgYW5kIGFueSBvcHRpb25zXG5cdCAqIEBwYXJhbSB7UXVpbGx9IHF1aWxsXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG5cdCAqL1xuXHRjb25zdHJ1Y3RvcihxdWlsbCwgb3B0aW9ucyA9IHt9KSB7XG5cdFx0Ly8gc2F2ZSB0aGUgcXVpbGwgcmVmZXJlbmNlXG5cdFx0dGhpcy5xdWlsbCA9IHF1aWxsO1xuXHRcdC8vIGJpbmQgaGFuZGxlcnMgdG8gdGhpcyBpbnN0YW5jZVxuXHRcdHRoaXMuaGFuZGxlRHJvcCA9IHRoaXMuaGFuZGxlRHJvcC5iaW5kKHRoaXMpO1xuXHRcdHRoaXMuaGFuZGxlUGFzdGUgPSB0aGlzLmhhbmRsZVBhc3RlLmJpbmQodGhpcyk7XG5cdFx0Ly8gbGlzdGVuIGZvciBkcm9wIGFuZCBwYXN0ZSBldmVudHNcblx0XHR0aGlzLnF1aWxsLnJvb3QuYWRkRXZlbnRMaXN0ZW5lcignZHJvcCcsIHRoaXMuaGFuZGxlRHJvcCwgZmFsc2UpO1xuXHRcdHRoaXMucXVpbGwucm9vdC5hZGRFdmVudExpc3RlbmVyKCdwYXN0ZScsIHRoaXMuaGFuZGxlUGFzdGUsIGZhbHNlKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBIYW5kbGVyIGZvciBkcm9wIGV2ZW50IHRvIHJlYWQgZHJvcHBlZCBmaWxlcyBmcm9tIGV2dC5kYXRhVHJhbnNmZXJcblx0ICogQHBhcmFtIHtFdmVudH0gZXZ0XG5cdCAqL1xuXHRoYW5kbGVEcm9wKGV2dCkge1xuXHRcdGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdGlmIChldnQuZGF0YVRyYW5zZmVyICYmIGV2dC5kYXRhVHJhbnNmZXIuZmlsZXMgJiYgZXZ0LmRhdGFUcmFuc2Zlci5maWxlcy5sZW5ndGgpIHtcblx0XHRcdGlmIChkb2N1bWVudC5jYXJldFJhbmdlRnJvbVBvaW50KSB7XG5cdFx0XHRcdGNvbnN0IHNlbGVjdGlvbiA9IGRvY3VtZW50LmdldFNlbGVjdGlvbigpO1xuXHRcdFx0XHRjb25zdCByYW5nZSA9IGRvY3VtZW50LmNhcmV0UmFuZ2VGcm9tUG9pbnQoZXZ0LmNsaWVudFgsIGV2dC5jbGllbnRZKTtcblx0XHRcdFx0aWYgKHNlbGVjdGlvbiAmJiByYW5nZSkge1xuXHRcdFx0XHRcdHNlbGVjdGlvbi5zZXRCYXNlQW5kRXh0ZW50KHJhbmdlLnN0YXJ0Q29udGFpbmVyLCByYW5nZS5zdGFydE9mZnNldCwgcmFuZ2Uuc3RhcnRDb250YWluZXIsIHJhbmdlLnN0YXJ0T2Zmc2V0KTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0dGhpcy5yZWFkRmlsZXMoZXZ0LmRhdGFUcmFuc2Zlci5maWxlcywgdGhpcy5pbnNlcnQuYmluZCh0aGlzKSk7XG5cdFx0fVxuXHR9XG5cblx0LyoqXG5cdCAqIEhhbmRsZXIgZm9yIHBhc3RlIGV2ZW50IHRvIHJlYWQgcGFzdGVkIGZpbGVzIGZyb20gZXZ0LmNsaXBib2FyZERhdGFcblx0ICogQHBhcmFtIHtFdmVudH0gZXZ0XG5cdCAqL1xuXHRoYW5kbGVQYXN0ZShldnQpIHtcblx0XHRpZiAoZXZ0LmNsaXBib2FyZERhdGEgJiYgZXZ0LmNsaXBib2FyZERhdGEuaXRlbXMgJiYgZXZ0LmNsaXBib2FyZERhdGEuaXRlbXMubGVuZ3RoKSB7XG5cdFx0XHR0aGlzLnJlYWRGaWxlcyhldnQuY2xpcGJvYXJkRGF0YS5pdGVtcywgZGF0YVVybCA9PiB7XG5cdFx0XHRcdGNvbnN0IHNlbGVjdGlvbiA9IHRoaXMucXVpbGwuZ2V0U2VsZWN0aW9uKCk7XG5cdFx0XHRcdGlmIChzZWxlY3Rpb24pIHtcblx0XHRcdFx0XHQvLyB3ZSBtdXN0IGJlIGluIGEgYnJvd3NlciB0aGF0IHN1cHBvcnRzIHBhc3RpbmcgKGxpa2UgRmlyZWZveClcblx0XHRcdFx0XHQvLyBzbyBpdCBoYXMgYWxyZWFkeSBiZWVuIHBsYWNlZCBpbnRvIHRoZSBlZGl0b3Jcblx0XHRcdFx0fVxuXHRcdFx0XHRlbHNlIHtcblx0XHRcdFx0XHQvLyBvdGhlcndpc2Ugd2Ugd2FpdCB1bnRpbCBhZnRlciB0aGUgcGFzdGUgd2hlbiB0aGlzLnF1aWxsLmdldFNlbGVjdGlvbigpXG5cdFx0XHRcdFx0Ly8gd2lsbCByZXR1cm4gYSB2YWxpZCBpbmRleFxuXHRcdFx0XHRcdHNldFRpbWVvdXQoKCkgPT4gdGhpcy5pbnNlcnQoZGF0YVVybCksIDApO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHR9XG5cdH1cblxuXHQvKipcblx0ICogSW5zZXJ0IHRoZSBpbWFnZSBpbnRvIHRoZSBkb2N1bWVudCBhdCB0aGUgY3VycmVudCBjdXJzb3IgcG9zaXRpb25cblx0ICogQHBhcmFtIHtTdHJpbmd9IGRhdGFVcmwgIFRoZSBiYXNlNjQtZW5jb2RlZCBpbWFnZSBVUklcblx0ICovXG5cdGluc2VydChkYXRhVXJsKSB7XG5cdFx0Y29uc3QgaW5kZXggPSAodGhpcy5xdWlsbC5nZXRTZWxlY3Rpb24oKSB8fCB7fSkuaW5kZXggfHwgdGhpcy5xdWlsbC5nZXRMZW5ndGgoKTtcblx0XHR0aGlzLnF1aWxsLmluc2VydEVtYmVkKGluZGV4LCAnaW1hZ2UnLCBkYXRhVXJsLCAndXNlcicpO1xuXHR9XG5cblx0LyoqXG5cdCAqIEV4dHJhY3QgaW1hZ2UgVVJJcyBhIGxpc3Qgb2YgZmlsZXMgZnJvbSBldnQuZGF0YVRyYW5zZmVyIG9yIGV2dC5jbGlwYm9hcmREYXRhXG5cdCAqIEBwYXJhbSB7RmlsZVtdfSBmaWxlcyAgT25lIG9yIG1vcmUgRmlsZSBvYmplY3RzXG5cdCAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrICBBIGZ1bmN0aW9uIHRvIHNlbmQgZWFjaCBkYXRhIFVSSSB0b1xuXHQgKi9cblx0cmVhZEZpbGVzKGZpbGVzLCBjYWxsYmFjaykge1xuXHRcdC8vIGNoZWNrIGVhY2ggZmlsZSBmb3IgYW4gaW1hZ2Vcblx0XHRbXS5mb3JFYWNoLmNhbGwoZmlsZXMsIGZpbGUgPT4ge1xuXHRcdFx0aWYgKCFmaWxlLnR5cGUubWF0Y2goL15pbWFnZVxcLyhnaWZ8anBlP2d8YT9wbmd8c3ZnfHdlYnB8Ym1wfHZuZFxcLm1pY3Jvc29mdFxcLmljb24pL2kpKSB7XG5cdFx0XHRcdC8vIGZpbGUgaXMgbm90IGFuIGltYWdlXG5cdFx0XHRcdC8vIE5vdGUgdGhhdCBzb21lIGZpbGUgZm9ybWF0cyBzdWNoIGFzIHBzZCBzdGFydCB3aXRoIGltYWdlLyogYnV0IGFyZSBub3QgcmVhZGFibGVcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXHRcdFx0Ly8gc2V0IHVwIGZpbGUgcmVhZGVyXG5cdFx0XHRjb25zdCByZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpO1xuXHRcdFx0cmVhZGVyLm9ubG9hZCA9IChldnQpID0+IHtcblx0XHRcdFx0Y2FsbGJhY2soZXZ0LnRhcmdldC5yZXN1bHQpO1xuXHRcdFx0fTtcblx0XHRcdC8vIHJlYWQgdGhlIGNsaXBib2FyZCBpdGVtIG9yIGZpbGVcblx0XHRcdGNvbnN0IGJsb2IgPSBmaWxlLmdldEFzRmlsZSA/IGZpbGUuZ2V0QXNGaWxlKCkgOiBmaWxlO1xuXHRcdFx0aWYgKGJsb2IgaW5zdGFuY2VvZiBCbG9iKSB7XG5cdFx0XHRcdHJlYWRlci5yZWFkQXNEYXRhVVJMKGJsb2IpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHR9XG5cbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/quill-image-drop-module/index.js\n"));

/***/ })

}]);